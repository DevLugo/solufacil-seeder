// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

model User {
  id        String    @id @default(cuid())
  name      String    @default("")
  email     String    @unique @default("")
  password  String?
  createdAt DateTime? @default(now())
}

model Employee {
  id                        String                @id @default(cuid())
  oldId                     String?               @unique
  routes                    Route?                @relation("Employee_routes", fields: [routesId], references: [id])
  routesId                  String?               @map("routes")
  transactions              Transaction[]         @relation("Transaction_lead")
  personalData              PersonalData?         @relation("Employee_personalData", fields: [personalDataId], references: [id])
  personalDataId            String?               @unique @map("personalData")
  loan                      Loan[]                @relation("Loan_grantor")
  commissionPayment         CommissionPayment[]   @relation("CommissionPayment_employee")
  LeadManagedLoans          Loan[]                @relation("Loan_lead")
  LeadPaymentReceivedLead   LeadPaymentReceived[] @relation("LeadPaymentReceived_lead")
  leadPaymentsReceivedAgent LeadPaymentReceived[] @relation("LeadPaymentReceived_agent")
  type                      String?

  @@index([routesId])
}

model Route {
  id         String     @id @default(cuid())
  name       String     @default("")
  employees  Employee[] @relation("Employee_routes")
  localities Location[] @relation("Location_route")
  accounts   Account[]  @relation("Account_route")
}

model Location {
  id             String        @id @default(cuid())
  name           String        @unique @default("")
  municipality   Municipality? @relation("Location_municipality", fields: [municipalityId], references: [id])
  municipalityId String?       @map("municipality")
  route          Route?        @relation("Location_route", fields: [routeId], references: [id])
  routeId        String?       @map("route")
  addresses      Address[]     @relation("Address_location")

  @@index([municipalityId])
  @@index([routeId])
}

model State {
  id             String         @id @default(cuid())
  name           String         @default("")
  municipalities Municipality[] @relation("Municipality_state")
}

model Municipality {
  id       String     @id @default(cuid())
  name     String     @default("")
  state    State?     @relation("Municipality_state", fields: [stateId], references: [id])
  stateId  String?    @map("state")
  location Location[] @relation("Location_municipality")

  @@index([stateId])
}

model Loantype {
  id           String    @id @default(cuid())
  name         String    @default("")
  weekDuration Int?
  rate         Decimal?  @postgresql.Decimal(18, 4)
  createdAt    DateTime? @default(now())
  updatedAt    DateTime?
  loan         Loan[]    @relation("Loan_loantype")
}

model Phone {
  id             String        @id @default(cuid())
  number         String        @default("")
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?
  personalData   PersonalData? @relation("Phone_personalData", fields: [personalDataId], references: [id])
  personalDataId String?       @map("personalData")

  @@index([personalDataId])
}

model Address {
  id             String        @id @default(cuid())
  street         String        @default("")
  exteriorNumber String        @default("")
  interiorNumber String        @default("")
  postalCode     String        @default("")
  references     String        @default("")
  location       Location?     @relation("Address_location", fields: [locationId], references: [id])
  locationId     String?       @map("location")
  personalData   PersonalData? @relation("Address_personalData", fields: [personalDataId], references: [id])
  personalDataId String?       @map("personalData")

  @@index([locationId])
  @@index([personalDataId])
}

model Borrower {
  id                String        @id @default(cuid())
  personalData      PersonalData? @relation("Borrower_personalData", fields: [personalDataId], references: [id])
  personalDataId    String?       @unique @map("personalData")
  createdAt         DateTime?     @default(now())
  updatedAt         DateTime?
  loanFinishedCount Int?          @default(0)
  loans             Loan[]        @relation("Loan_borrower")
}

model PersonalData {
  id        String    @id @default(cuid())
  fullName  String    @default("")
  phones    Phone[]   @relation("Phone_personalData")
  addresses Address[] @relation("Address_personalData")
  birthDate DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime?
  employee  Employee? @relation("Employee_personalData")
  borrower  Borrower? @relation("Borrower_personalData")
}

model Loan {
  id                     String              @id @default(cuid())
  oldId                  String?             @unique
  payments               LoanPayment[]       @relation("LoanPayment_loan")
  requestedAmount        Decimal             @postgresql.Decimal(10, 2)
  amountGived            Decimal             @postgresql.Decimal(10, 2)
  loantype               Loantype?           @relation("Loan_loantype", fields: [loantypeId], references: [id])
  loantypeId             String?             @map("loantype")
  signDate               DateTime            @default(now())
  badDebtDate            DateTime?
  profitAmount           Decimal?            @postgresql.Decimal(10, 2)
  avalName               String              @default("")
  avalPhone              String              @default("")
  grantor                Employee?           @relation("Loan_grantor", fields: [grantorId], references: [id])
  grantorId              String?             @map("grantor")
  transactions           Transaction[]       @relation("Transaction_loan")
  lead                   Employee?           @relation("Loan_lead", fields: [leadId], references: [id])
  leadId                 String?             @map("lead")
  borrower               Borrower?           @relation("Loan_borrower", fields: [borrowerId], references: [id])
  borrowerId             String?             @map("borrower")
  previousLoan           Loan?               @relation("Loan_previousLoan", fields: [previousLoanId], references: [id])
  previousLoanId         String?             @map("previousLoan")
  commissionPayment      CommissionPayment[] @relation("CommissionPayment_loan")
  comissionAmount        Decimal?            @postgresql.Decimal(18, 4)
  finishedDate           DateTime?
  updatedAt              DateTime?
  createdAt              DateTime?           @default(now())
  status                 String?
  from_Loan_previousLoan Loan[]              @relation("Loan_previousLoan")

  @@index([loantypeId])
  @@index([grantorId])
  @@index([leadId])
  @@index([borrowerId])
  @@index([previousLoanId])
}

model LoanPayment {
  id                    String               @id @default(cuid())
  amount                Decimal?             @postgresql.Decimal(10, 2)
  comission             Decimal?             @postgresql.Decimal(18, 4)
  receivedAt            DateTime?            @default(now())
  createdAt             DateTime?            @default(now())
  updatedAt             DateTime?
  oldLoanId             String?
  loan                  Loan?                @relation("LoanPayment_loan", fields: [loanId], references: [id])
  loanId                String?              @map("loan")
  transactions          Transaction[]        @relation("Transaction_loanPayment")
  type                  String?
  leadPaymentReceived   LeadPaymentReceived? @relation("LoanPayment_leadPaymentReceived", fields: [leadPaymentReceivedId], references: [id])
  leadPaymentReceivedId String?              @map("leadPaymentReceived")
  paymentMethod         String?

  @@index([loanId])
  @@index([leadPaymentReceivedId])
}

model Transaction {
  id                   String       @id @default(cuid())
  amount               Decimal?     @postgresql.Decimal(18, 4)
  date                 DateTime?    @default(now())
  type                 String?
  incomeSource         String?
  expenseSource        String?
  description          String       @default("")
  lead                 Employee?    @relation("Transaction_lead", fields: [leadId], references: [id])
  leadId               String?      @map("lead")
  sourceAccount        Account?     @relation("Transaction_sourceAccount", fields: [sourceAccountId], references: [id])
  sourceAccountId      String?      @map("sourceAccount")
  destinationAccount   Account?     @relation("Transaction_destinationAccount", fields: [destinationAccountId], references: [id])
  destinationAccountId String?      @map("destinationAccount")
  loan                 Loan?        @relation("Transaction_loan", fields: [loanId], references: [id])
  loanId               String?      @map("loan")
  loanPayment          LoanPayment? @relation("Transaction_loanPayment", fields: [loanPaymentId], references: [id])
  loanPaymentId        String?      @map("loanPayment")
  profitAmount         Decimal?     @default("0") @postgresql.Decimal(10, 2)
  returnToCapital      Decimal?     @default("0") @postgresql.Decimal(10, 2)
  createdAt            DateTime?    @default(now())
  updatedAt            DateTime?

  @@index([date])
  @@index([date, leadId])
  @@index([type, date])
  @@index([leadId])
  @@index([sourceAccountId])
  @@index([destinationAccountId])
  @@index([loanId])
  @@index([loanPaymentId])
}

model CommissionPayment {
  id         String    @id @default(cuid())
  amount     Decimal?  @postgresql.Decimal(18, 4)
  loan       Loan?     @relation("CommissionPayment_loan", fields: [loanId], references: [id])
  loanId     String?   @map("loan")
  employee   Employee? @relation("CommissionPayment_employee", fields: [employeeId], references: [id])
  employeeId String?   @map("employee")

  @@index([loanId])
  @@index([employeeId])
}

model LeadPaymentType {
  id   String  @id @default(cuid())
  type String?
}

model FalcoCompensatoryPayment {
  id                    String               @id @default(cuid())
  amount                Decimal?             @postgresql.Decimal(18, 4)
  createdAt             DateTime?            @default(now())
  updatedAt             DateTime?
  leadPaymentReceived   LeadPaymentReceived? @relation("FalcoCompensatoryPayment_leadPaymentReceived", fields: [leadPaymentReceivedId], references: [id])
  leadPaymentReceivedId String?              @map("leadPaymentReceived")

  @@index([leadPaymentReceivedId])
}

model LeadPaymentReceived {
  id                        String                     @id @default(cuid())
  expectedAmount            Decimal?                   @postgresql.Decimal(18, 4)
  paidAmount                Decimal?                   @postgresql.Decimal(18, 4)
  cashPaidAmount            Decimal?                   @postgresql.Decimal(18, 4)
  bankPaidAmount            Decimal?                   @postgresql.Decimal(18, 4)
  falcoAmount               Decimal?                   @postgresql.Decimal(18, 4)
  paymentStatus             String?
  createdAt                 DateTime?                  @default(now())
  updatedAt                 DateTime?
  agent                     Employee?                  @relation("LeadPaymentReceived_agent", fields: [agentId], references: [id])
  agentId                   String?                    @map("agent")
  lead                      Employee?                  @relation("LeadPaymentReceived_lead", fields: [leadId], references: [id])
  leadId                    String?                    @map("lead")
  falcoCompensatoryPayments FalcoCompensatoryPayment[] @relation("FalcoCompensatoryPayment_leadPaymentReceived")
  payments                  LoanPayment[]              @relation("LoanPayment_leadPaymentReceived")

  @@index([agentId])
  @@index([leadId])
}

model Account {
  id                   String        @id @default(cuid())
  name                 String        @default("")
  type                 String?
  amount               Decimal?      @postgresql.Decimal(18, 4)
  transactions         Transaction[] @relation("Transaction_sourceAccount")
  receivedTransactions Transaction[] @relation("Transaction_destinationAccount")
  route                Route?        @relation("Account_route", fields: [routeId], references: [id])
  routeId              String?       @map("route")
  updatedAt            DateTime?
  createdAt            DateTime?     @default(now())

  @@index([routeId])
}
